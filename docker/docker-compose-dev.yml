version: '3'

networks:
  api-network:
    driver: bridge
  kong-net:
    driver: bridge

services:

  #######################################
  # Postgres Aplicacao
  #######################################
  postgres:
      image: postgres:14-alpine
      ports:
        - 5432:5432
      volumes:
        - ./data/postgres:/var/lib/postgresql/data
      environment:
        - POSTGRES_PASSWORD=S3cret
        - POSTGRES_USER=glauber
      #  - POSTGRES_DB=algo
      networks:
        - api-network

  #######################################
  # Postgres: The database used by Kong
  #######################################
#  kong-database:
#    image: postgres:9.6
#    restart: always
#    networks:
#      - kong-net
#    environment:
#      POSTGRES_USER: kong
#      POSTGRES_DB: kong
#    ports:
#      - "5433:5432"
#    healthcheck:
#      test: ["CMD", "pg_isready", "-U", "kong"]
#      interval: 5s
#      timeout: 5s
#      retries: 5

  #######################################
  # Kong database migration
  #######################################
#  kong-migration:
#    image: kong:latest
#    command: "kong migrations bootstrap"
#    networks:
#      - kong-net
#    restart: on-failure
#    environment:
#      KONG_PG_HOST: kong-database
#    links:
#      - kong-database
#    depends_on:
#      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
#  kong:
#    image: kong:latest
#    restart: always
#    networks:
#      - kong-net
#    environment:
#      KONG_PG_HOST: kong-database
#      KONG_PROXY_LISTEN: 0.0.0.0:8000
#      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
#      KONG_ADMIN_LISTEN: 0.0.0.0:8001
#    depends_on:
#      - kong-migration
#      - kong-database
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://kong:8001"]
#      interval: 5s
#      timeout: 2s
#      retries: 15
#    ports:
#      - "8001:8001"
#      - "8000:8000"

  #######################################
  # Konga database prepare
  #######################################
#  konga-prepare:
#    image: pantsel/konga:next
#    command: "-c prepare -a postgres -u postgresql://kong@kong-database:5432/konga_db"
#    networks:
#      - kong-net
#    restart: on-failure
#    links:
#      - kong-database
#    depends_on:
#      - kong-database

  #######################################
  # Konga: Kong GUI
  #######################################
#  konga:
#    image: pantsel/konga:next
#    restart: always
#    networks:
#      - kong-net
#    environment:
#      DB_ADAPTER: postgres
#      DB_HOST: kong-database
#      DB_USER: kong
#      TOKEN_SECRET: km1GUr4RkcQD7DewhJPNXrCuZwcKmqjb
#      DB_DATABASE: konga_db
#      NODE_ENV: production
#    depends_on:
#      - kong-database
#    ports:
#      - "1337:1337"

#  zookeeper:
#    image: zookeeper:3.4.9
#    hostname: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOO_MY_ID: 1
#      ZOO_PORT: 2181
#      ZOO_SERVERS: server.1=zookeeper:2888:3888
#    volumes:
#      - ./data/zookeeper/data:/data
#      - ./data/zookeeper/datalog:/datalog
#    depends_on:
#      - postgres
#  kafka1:
#    image: confluentinc/cp-kafka:5.3.0
#    hostname: kafka1
#    ports:
#      - "9091:9091"
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_BROKER_ID: 1
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#    volumes:
#      - ./data/kafka1/data:/var/lib/kafka/data
#    depends_on:
#      - zookeeper
#  kafdrop:
#    image: obsidiandynamics/kafdrop
#    restart: "no"
#    ports:
#      - "9000:9000"
#    environment:
#      KAFKA_BROKERCONNECT: "kafka1:19091"
#    depends_on:
#      - kafka1

#Sobre o Zookeeper: https://dattell.com/data-architecture-blog/what-is-zookeeper-how-does-it-support-kafka/
#Detalhes das vari√°veis de ambiente:
#Zookeper: https://hub.docker.com/_/zookeeper
#Kafka: https://docs.confluent.io/platform/current/kafka/multi-node.html
#Kafdrop: https://github.com/obsidiandynamics/kafdrop
